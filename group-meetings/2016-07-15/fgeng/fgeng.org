#+title:Research Report 
#+author:Geng Feiyang
#+DUEDATE:<2016-07-13 Wed>

* Summary of research
** Effect of vibrational entropy 
*** brief introduction of stiffness vs bond length method
Stiffness vs bond length method is basic way for us to calculate vibrational energy. All the structures are relaxed at first and perturbation is generated at different directions. After calculation of force constant matrices, a stretching-bending force constant model is established and the relationship between stiffness and bond length is applied to all other structures in order to calculate their vibrational quantities. The figure ref:fig-culi shows a good example of the way to determine the force constant. cite:Wale-2004-first. Linear or non-linear fitting is performed to determine the relationship between stiffness and bond length of CuLi alloy. 

[[./CuLi.png]]
#+caption: Determination of length-dependant force constant in CuLi alloy. label:fig-culi

*** convergence test
Before the fitting of stiffness of stretching and bending force constants as function of bond length, a convergence test is needed to determine parameters for static calculation. 


we perform convergence test on one of the B2 super-cell structure with displacement of perturbed atom. All the calculations are static with no relaxation. Only encut and k points number are allowed to change. The radius of super-cell is set to be 9 $/Ang$ which is more than three times the distance between nearest neighbors. The sufficiently large radius is of necessity so as to make sure the element of force constant matrix falls to negligable value at the boundary of super-cell. Displacement of perturbed atom is initially set to be 0.2 Angstrom as default. Number of intermediate lattice parameters sampled is 2 which is the minimum value to determine the relationship between bond stiffness and bond length. 


The Figure ref:fig-converge-encut shows the result of convergence test with various energy cutoff. Encut number increases from 300 to 550 and k points density is fixed to 4X4X4. Energies obtained are not corrected by converged energy. In the force convergence test, we assume the result with energy cutoff of 550 eV is most accurate among other calculations. Therefore, the force of various encut is corrected by the force of energy cutoff of 550 along same direction.Eventually the averaged disparity of forces among all directions is reported.  The Figure ref:fig-converge-encut (a) shows encut should be larger than 350 to converge to 1 meV/atom. Comparably, Figure ref:fig-converge-encut (b) shows the convergence of force within 1 $meV/A^2$ requires minimum energy cutoff of 300 eV. 

[[./encut-convergence.png]]
#+caption: (a) encut vs energy convergence. (b) encut vs force convergence. label:fig-converge-encut


As for k points convergence, the energy cutoff for each k-points is fixed at 400 eV and k-points changes from 3X3X3 to 6X6X6. The maximum force disparity is reported in the same way as the test of encut convergence. 
From Figure ref:fig-converge-kpts (a), it is clear that k points larger than 4X4X4 is sufficient for energy convergence of $1meV/atom$  and force convergence of $1meV/Ang^2$. 
[[./kpoints-convergence.png]]
#+caption: (a) k-points vs energy convergence. (b) k-points vs force convergence. label:fig-converge-kpts

So, what parameter to choose for further calculation? We want to balance both computational cost and accuracy. A calculation with encut of 500 and kpoints density of 6X6X6 may cost more than 2 days to converge. Not to mention a more accurate calculation may requires larger super-cell. Thus, high energy cutoff and k-points density are both very costly. Eventually we decides to use encut = 350 and kpoints density = 5X5X5. This setting may result in a energy convergence of around 2 $meV/atom$ and a force convergence within 0.001 $eV/A^2$.  

*** try phase diagram
After convergence test, we choose energy cutoff of 350 eV and k points density of 5X5X5 as parameter to continue static calculation. The displacement of perturbed atom is chosen to be 0.15 Angstrom for bcc and 0.2 Angstrom for fcc. Super-cell with perturbation is constructed based on 7 ground states of fcc and 5 ground states of bcc structure. No other structures are involved. Figure ref:fig-cucua, ref:fig-cupda, ref:fig-pdpda is the result of bcc. All the plot shows good fit to the stiffness.  
[[./Cu-Cu-accurage.png]]
#+caption:Stretching (left) and bending (right) terms of nearest neighbor spring tensor as a function of bond length. Each point corresponds to Cu-Cu bond in one of a set of bcc structure.label:fig-cucua

[[./Cu-Pd-accurage.png]]
#+caption:Stretching (left) and bending (right) terms of nearest neighbor spring tensor as a function of bond length. Each point corresponds to Cu-Pd bond in one of a set of bcc structure. label:fig-cupda

[[./Pd-Pd-accurage.png]]
#+caption:Stretching (left) and bending (right) terms of nearest neighbor spring tensor as a function of bond length. Each point corresponds to Pd-Pd bond in one of a set of bcc structure. label:fig-pdpda


[[./fcc01.png]]
#+caption:Stretching(s) and bending (b) terms of the nearest neighbor spring tensor as a function of bond length. Each point corresponds to one type of bond in one of a set of fcc structures(A1,L12, fcc Cu, fcc Pd, each taken at two different volumes) label:fig-linear

Figure ref:fig-linear is the fitting result of fcc. The stiffness decreases as bond length increases and eventually a good linear relationship is fitted in the plot. Cluster expansion is then performed on all structures. Although 17 configurations (including Pd bcc)are unstable, we still force the program to generate vibrational energy for all of them, regardless of their negative frequency. The CVS is eventually 12meV/atom. When vibrational free energy is obtained, we add the vibrational free energy to configurational enthalpy at 0K in order to show the contribution of vibrational entropy at various temperature. 


[[./vibbcc.png]]
#+caption:Left plot shows the vibrational free energy of B2 structures. Right plot is the convex hull of enthalpy of bcc with vibrational free energy. (referenced energy is Cu bcc and Pd bcc)label:fig-bccvib
[[./vibfcc.png]]
#+caption::Left plot shows the vibrational free energy of fcc structures. Right plot is the convex hull of enthalpy of fcc with vibrational free energy. (referenced energy is fcc Cu and fcc Pd) label:fig-fccvib

[[./vib2.png]]
#+caption:Convex hull of enthalpy for both fcc and bcc(configurational enthalpy at 0K + vibrational enthalpy at various T, referenced energy is Cu fcc and Pd fcc). label:fig-vibhull
Figure ref:fig-bccvib and ref:fig-fccvib are the resulting profile of bcc and fcc. The total enthalpy profile with referenced energy of fcc(configurational enthalpy at 0 K + vibrational enthalpy at various temperatures) shows a stable trend for B2 phase, figure ref:fig-vibhull. To verify this trend for B2 phase, a phase diagram is done based on the vibrational free energy.
[[./stiffnessmethod.png]]
#+caption:Phase diagram of CuPd involving vibrational free energy. label:fig-stiffness
However the result is very different from what we expect,figure ref:fig-stiffness. The phase transition appears at very low temperature and no expansion of B2 is observed. Something must goes wrong. One possibility is that the fitting does not converge and structures we consider are not enough. Another possibility is that displacement of atom we chose is wrong and the stiffness is therefore inaccurate.  

*** add more structures to fitting of stiffness vs bond length

One possibility for the failure of fitting process is that the fitting does not converge because the structures we consider is not enough. Thus more non-ground-state structures are considered to reinforce the fitting accuracy. 

[[./Cu-Cu-add.png]]
#+caption:Stretching (left) and bending (right) terms of nearest neighbor spring tensor as a function of bond length. Each point corresponds to Cu-Cu bond in one of a set of bcc structure. label:fig-cucuadd


[[./Cu-Pd-add.png]]
#+caption:Stretching (left) and bending (right) terms of nearest neighbor spring tensor as a function of bond length. Each point corresponds to Cu-Pd bond in one of a set of bcc structure. label:fig-cupdadd


[[./Pd-Pd-add.png]]
#+caption:Stretching (left) and bending (right) terms of nearest neighbor spring tensor as a function of bond length. Each point corresponds to Pd-Pd bond in one of a set of bcc structure. label:fig-pdpdadd
However, as seen in Figure ref:fig-cucuadd, ref:fig-cupdadd and ref:fig-pdpdadd, the addition of non-ground state configuration causes wide distribution of data which is not a good option for fitting process.I tried with different order of polynomial. However the result is still not as I expected. 

[[./addnongs.png]]
#+caption: Enthalpy profile of both fcc and bcc when non-groundstate configurations are added to fit. (referenced energy is Cu fcc and Pd fcc) label:fig-addnongs
The resulting profile of vibrational contribution to the total enthalpy are shown in Figure ref:fig-addnongs. From this plot, the enthalpy of B2 phase eventually increases as temperature increases. It may be wrong,as our fitting looks terrible. 

But I do not think those structures should not be considered, the reason why this fitting become worse as more structures are considered is probably a result of large force in lattice. Because we use isif=7, those force cannot be removed. The only thing we can do is to select structures more carefully and choose those most stable configurations in calculation.  

*** effect of displacement of atom in stiffness vs bond length method
In order to find out a suitable displacement of perturbed atom, we fit the relationship between stiffness and bond length based on the same ground state configurations. The result is shown in figure ref:fig-cucu, ref:fig-cupd, and ref:fig-pdpd. It can be seen that different displacement has different stiffness at equal bond length and the result does not converge as displacement decreases, especially for the long-range bond.

[[./Cu-Cu-testdr.png]]
#+caption:Bond-length-dependent stiffness of Cu-Cu bond with various displacement of perturbed atom. The left plot represents Cu-Cu stretching mode and right one represent Cu-Cu bending mode (dr means displacement of perturbed atom). label:fig-cucu 
[[./Cu-Pd-testdr.png]]
#+caption:Bond-length-dependant stiffness of Cu-Pd bond with various displacement of perturbed atom. The left plot represent stretching mode and right one represent the bending mode.(dr means displacement of perturbed atom) label:fig-cupd
[[./Pd-Pd-testdr.png]]
#+caption:Bond-length-dependent stiffness of Pd-Pd bond with different displacements of perturbed atom.  The left plot represent stretching mode and right one represent the bending mode.(dr means displacement of perturbed atom) label:fig-pdpd
 We try to decreases the criteria of convergence of EDIFFG=-1E-4. The result is shown in Figure ref:fig-cucu-testac, ref:fig-cupd-testac and ref:fig-pdpd-testac.
[[./Cu-Cu-testaccurate.png]]
#+caption: Bond-length-dependant stiffness of Cu-Cu bond  based on different convergence criteria. Left plot shows stretching mode and right plot shows bending mode. label:fig-cucu-testac  
[[./Cu-Pd-testaccurate.png]]
#+caption:Bond-length-dependant stiffness of Cu-Pd bond  based on different convergence criteria. Left plot shows stretching mode and right plot shows bending mode. label:fig-cupd-testac  
[[./Pd-Pd-testaccurate.png]]
#+caption:Bond-length-dependent stiffness of Pd-Pd bond  based on different convergence criteria. Left plot shows stretching mode and right plot shows bending mode. label:fig-pdpd-testac  
Although force is more accurate, the resulting stiffness does not change much. It is hard to know whether this lost of convergence is really due to the lack of accuracy of force or for other reasons.   

So, we now face two questions: 1) how to fit for the correct relationship between stiffness and bond length? 2) how do we know which fitting is correct? For the first question, it seems displacement of atom will cause convergence problem and it is still not clear about the accuracy of the stiffness I obtained. without accurate stiffness, the fitting will be wrong. Therefore, the convergence test need to be finished and a suitable displacement of atom is very necessary. Also, those configurations with large force should be ruled out in fitting. We should consider to fit based on those stable phases. For the second question, I have my own answer.Now that the fitting process generate a large uncertainty for vibrational enthalpy, we try to use simple phonon calculation in the next section, in order to obtain an accurate result of vibrational enthalpy profile without dependence on the fitting problem. Then we shall know which fitting of stiffness vs bond length is right.

*** more accurate vibrational calculation based on spring model  label:title-2
in order to confirm the result of stiffness vs bond length method. we performed a simple vibrational calculation which does not rely on fitting process. This method (fitfc) is conducted by fitting a spring model to
reaction forces resulting from imposed atomic displacements. The parameters, such as radius of super-cell, the number of different strain at which phonon calculations will be performed and maximum strain, are equal to previous calculation based on stiffness vs bond length method. All total energy and force calculations with relaxation used energy cutoffs of 500 eV and 500 unique k-points per 4 atoms. Before super-cell configurations are generated for force constant calculation, all the structures involved was fully relaxed in both shape and volume. in force constant calculation, energy cutoff declines to 350 eV and k-points per reciprocal atom reaches 3000 for a better force convergence to 0.001 $eV/Ang^2$. Vibrational entropy is also converged to 0.023 $k_B$ (Bolzmann constant 8.617E-5 eV/K) by increasing force constant range.  

So as to rule out the possibility of large error in static calculation and fitting of force constant matrix, a detailed convergence test is also performed on four structures, including fcc Cu, fcc Pd, fcc CuPd and L12 configurations. 
Below, the convergence test on cutoff energy is performed at first with fixed k-points of 5X5X5 and displacement of perturbed atom of 0.1 $/Ang$. Radius of super-cell is set to be 9 $/Ang$. 


[[./vib-fitfc-B2-encut.png]]
#+caption: Vibrational free energy profile of CuPd bcc as function of cutoff energy. label:fig-encut-conver

[[./vib-fitfc-0-encut.png]]
#+caption: Vibrational free energy profile of Cu fcc as function of cutoff energy. label:fig-encut-0-conver

[[./vib-fitfc-1-encut.png]]
#+caption: Vibrational free energy profile of Pd fcc as function of cutoff energy. label:fig-encut-1-conver

[[./vib-fitfc-27-encut.png]]
#+caption: Vibrational free energy profile of Cu3Pd L12 as function of cutoff energy. label:fig-encut-27-conver
From figure ref:fig-encut-conver, ref:fig-encut-0-conver ,ref:fig-encut-1-conver, ref:fig-encut-27-conver, it is clear that encut does not have significant influence in vibrational calculation and cutoff energy of 350 eV is already sufficient.


Figure ref:fig-kpts-3, ref:fig-kpts-0, ref:fig-kpts-1, ref:fig-kpts-27, are result of k-points convergence. 

[[./vib-fitfc-3-kpts.png]]
#+caption: Vibrational free energy profile of CuPd bcc as function of k-points density . label:fig-kpts-3
[[./vib-fitfc-0-kpts.png]]
#+caption: Vibrational free energy profile of Cu fcc as function of k-points density. label:fig-kpts-0
[[./vib-fitfc-1-kpts.png]]
#+caption: Vibrational free energy profile of Pd fcc as function of k-points density. label:fig-kpts-1
[[./vib-fitfc-27-kpts.png]]
#+caption: Vibrational free energy profile of Cu3Pd L12 as function of k-points density. label:fig-kpts-27
Although there will be around 5 meV/atom difference in vibrational free energy, as shown in Figure ref:fig-kpts-3, most of structures are not significantly influenced by increasing k points density. Therefore, kpoints-density of 5X5X5 can reach vibrational free energy convergence of 5meV/atom and k-points density of 6X6X6 can reach vibrational free energy convergence of 1meV/atom. 


Except for encut and k-points, the radius of super-cell also matters. A large radius, which is larger than three times the nearest neighbors, is necessary to ensure the element in force constant matrix is negligable at the boundary of super-cell.we start calculation from radius of 6 $/Ang$ to 10 $/Ang$ (number of atoms in super-cell varies from 16 atoms to 42 atoms). The encut and k points density are set to be 350 eV and 5X5X5 respectively. displacement of atom is 0.1 $/Ang$. 

[[./vib-fitfc-3-er.png]]
#+caption: Vibrational free energy of CuPd B2 structure as with different super-cell radius. label:fig-r-3
[[./vib-fitfc-0-er.png]]
#+caption: Vibrational free energy of Cu fcc structure with differernt super-cell radius. label:fig-r-0
[[./vib-fitfc-1-er.png]]
#+caption: Vibrational free energy of Pd fcc structure with various super-cell radius. label:fig-r-1
[[./vib-fitfc-27-er.png]]
#+caption: Vibrational free energy of Cu3Pd L12 structure as function of super-cell radius. label:fig-r-27
As shown in Figure ref:fig-r-3, ref:fig-r-0, ref:fig-r-1, ref:fig-r-27, the vibrational free energy at lower temperature is well converged to 1 meV/atom. At high temperature of 900 K, only B2 CuPd structure shows a poor convergence (around 12 meV/atom compared with result of largest super-cell radius). This result indicates a super-cell radius of 10 $/Ang$ may be necessary for bcc structure and radius of 9 $/Ang$ is already sufficient for fcc. 


In the end, a convergence test for displacement of perturbed atom is also considered. we increased the displacement of atom from 0.015 $/Ang$ to 0.2 $/Ang$ for FCC and from 0.015 $/Ang$ to 0.15 $/Ang$ for BCC. In Table ref:tag-displacement, it is clear that displacement of atom makes a very big difference. For some structures that is considered to be unstable at large displacement of atom, such as BCC Pd. Smaller displacement will be a good solution. As for those structures that is considered to be stable, it seems smaller displacement will change the vibrational free energy we got. The difference of energy is within 15 meV/atom at 900K. There, I am confused, do we need to find out the smallest possible displacement in order to make sure our data is most accurate in the harmonic region? My answer is yes. If that is an important data we need. 


#+caption: Convergence test on displacement of atom. label:tag-displacement
| structure | displacement of atom ($/Ang$) | F(eV/atom) 300K | F(eV/atom) 600K | F(eV/atom) 900K |
| FCC Cu    |                           0.2 |          -0.023 |          -0.159 |          -0.338 |
| FCC Cu    |                         0.015 |          -0.023 |          -0.158 |          -0.334 |
| FCC Pd    |                           0.2 |          -0.034 |          -0.180 |          -0.368 |
| FCC Pd    |                         0.015 |          -0.037 |          -0.187 |          -0.378 |
| L12 Cu3Pd |                           0.2 |          -0.026 |          -0.164 |          -0.344 |
| L12 Cu3Pd |                         0.015 |          -0.030 |          -0.173 |          -0.356 |
| B2 CuPd   |                          0.15 |          -0.037 |          -0.185 |          -0.376 |
| B2 CuPd   |                           0.1 |          -0.038 |          -0.188 |          -0.380 |
| B2 CuPd   |                          0.05 |        unstable |        unstable |        unstable |
| B2 CuPd   |                          0.03 |        unstable |        unstable |        unstable |
| B2 CuPd   |                         0.015 |        unstable |        unstable |        unstable |
| B2 Cu5Pd3 |                          0.15 |          -0.034 |          -0.181 |          -0.369 |
| B2 Cu5Pd3 |                           0.1 |          -0.033 |          -0.178 |          -0.366 |
| B2 Cu5Pd3 |                         0.015 |          -0.034 |          -0.181 |          -0.369 |
| B2 Cu     |                          0.15 |          -0.032 |          -0.177 |          -0.363 |
| B2 Cu     |                           0.1 |          -0.033 |          -0.179 |          -0.367 |
| B2 Cu     |                         0.015 |        unstable |        unstable |        unstable |
| B2 Pd     |                          0.15 |        unstable |        unstable |        unstable |
| B2 Pd     |                           0.1 |        unstable |        unstable |        unstable |
| B2 Pd     |                         0.015 |          -0.048 |          -0.209 |          -0.413 |
|           |                               |                 |                 |                 |
|           |                               |                 |                 |                 |


After the convergence test, a completed vibrational calculation is performed. The displacement of atom is set to be 0.2 $/Ang$ for FCC and 0.15 $/Ang$ for BCC. For Pd BCC, displacement of 0.015 $/Ang$ is used to avoid unstable mode.  The profile of vibrational enthalpy for bcc and fcc is shown in Figure ref:fig-fitfcbcc and ref:fig-fitfcfcc respectively. Then we combine the fcc and bcc in one plot with referenced energy of Cu fcc and Pd fcc.


[[./fitfcbcc.png]]
#+caption: Left plot is the vibrational free energy of B2 phase at various composition. Right plot shows the vibrational enthalpy of bcc as function of temperature (referenced energy is bcc Cu and bcc Pd). label:fig-fitfcbcc

[[./fitfcfcc.png]]
#+caption: Left plot is the vibrational free energy of fcc phase at various composition. Right plot shows the vibrational enthalpy of bcc fcc as function of temperature (referenced energy is fcc Cu and fcc Pd). label:fig-fitfcfcc
[[./fitfc-sum.png]]

#+caption: Vibrational enthalpy of bcc and fcc as function of temperature (referenced energy is fcc Cu and fcc Pd). label:fig-vib
as is shown in Figure ref:fig-vib, the vibrational enthalpy of B2 region decreases as temperature goes up. The decreasing rate of vibrational enthalpy of B2 phase is obvious higher than FCC which indicates the expansion of B2 region due to the contribution of vibrational free energy. 

[[./fitfc-ref.png]] 
#+caption: The vibrational free energy of Cu Pd in different phases. label:fig-ref
We may wonder why the energy of B2 phase decreases when it is corrected by Cu fcc and Pd fcc. The figure ref:fig-ref can explain this observation. As the free energy of fcc phase is higher than that in bcc phase, correction of vibrational free energy of B2 phase will cause it lower than the vibrational free energy of fcc phase. 
[[./vibentropy.png]]

#+caption: Vibrational formation entropy of CuPd B2 phase and Cu3Pd L12 phase as function of temperature. label:fig-entro 

To further understand this trend, we calculate the vibrational entropy of L12 and B2 phase and correct it with vibrational entropy of Cu fcc and Pd fcc at corresponding temperature. The resulting vibrational formation entropy of B2 phase is obvious larger than L12 phase which contributes to the stability of B2 phase. Because this result does not rely on fitting of stiffness vs bond length, it can be a more accurate profile than those we got in Figure ref:fig-addnongs and ref:fig-vibhull. Although this plot confirm what we believe in the phase behavior, the accuracy may still be a problem, as the displacement of perturbed atom may be too large and result sill not converge.
 
** next step 
There are two thing to do: 1) we explore the convergence of fitting by decrease displacement of perturbed atom for both fcc and bcc. Then refit the relationship between stiffness and bond length. 2) decrease the displacement of perturbed atom and go for a converged vibrational enthalpy profile based on the simple phonon calculation as we described in second section ref:title-2. 
* Appendix
** Part A. Result of Cluster Expansion
*** convex hull of fcc and bcc encut=500
#+BEGIN_SRC python
from vasp import Vasp
from ase.io import read
import os

f = open('../CuPd_fcc_encut500/gs.out','r')
lines = f.readlines()
f.close()

gs_fcc_concentration,gs_fcc_energy,gs_fcc_fitenergy,gs_fcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_fcc_concentration.append(float(c))
    gs_fcc_energy.append(float(e))
    gs_fcc_fitenergy.append(float(fe))
    gs_fcc_index.append(int(i))



f = open('../CuPd_fcc_encut500/fit.out','r')
lines = f.readlines()
f.close()

gs_c_fcc_concentration,gs_c_fcc_energy,gs_c_fcc_fitenergy,gs_c_fcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_c_fcc_concentration.append(float(c))
    gs_c_fcc_energy.append(float(e))
    gs_c_fcc_fitenergy.append(float(fe))
    gs_c_fcc_index.append(int(i))


f = open('../CuPd_bcc_hp3-3/gs.out','r')
lines = f.readlines()
f.close()

gs_bcc_concentration,gs_bcc_energy,gs_bcc_fitenergy,gs_bcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_bcc_concentration.append(float(c))
    gs_bcc_energy.append(float(e))
    gs_bcc_fitenergy.append(float(fe))
    gs_bcc_index.append(int(i))



f = open('../CuPd_bcc_hp3-3/fit.out','r')
lines = f.readlines()
f.close()

gs_c_bcc_concentration,gs_c_bcc_energy,gs_c_bcc_fitenergy,gs_c_bcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_c_bcc_concentration.append(float(c))
    gs_c_bcc_energy.append(float(e))
    gs_c_bcc_fitenergy.append(float(fe))
    gs_c_bcc_index.append(int(i))


import matplotlib.pyplot as plt
plt.subplot(121)
plt.plot(gs_c_fcc_concentration,gs_c_fcc_fitenergy,'gx',label=" Fitted Energies")
plt.plot(gs_fcc_concentration,gs_fcc_energy,'ko-',
     label='Known Ground State',markersize=4,
     markerfacecolor='blue',markeredgecolor='black')
plt.plot(gs_fcc_concentration,gs_fcc_fitenergy,'g+')
plt.plot(gs_c_fcc_concentration,gs_c_fcc_energy,'r+',label="known Structure")
plt.xlabel('$x_{%s}$' %'Pd')
plt.ylabel('Heat Of Formation (eV/atom)')
plt.text(0,0.04,'(a)',size=20)
plt.legend(loc=4,prop={'size':10})
plt.ylim([-0.15,0.05])
plt.subplot(122)
plt.plot(gs_c_bcc_concentration,gs_c_bcc_fitenergy,'gx',label=" Fitted Energies")
plt.plot(gs_bcc_concentration,gs_bcc_energy,'ko-',
     label='Known Ground State',markersize=4,
     markerfacecolor='blue',markeredgecolor='black')
plt.plot(gs_bcc_concentration,gs_bcc_fitenergy,'g+')
plt.plot(gs_c_bcc_concentration,gs_c_bcc_energy,'r+',label="known Structure")
plt.xlabel('$x_{%s}$' %'Pd')
plt.ylabel('Heat Of Formation (eV/atom)')
plt.text(0,0.04, '(b)', size=20)
plt.ylim([-0.15,0.05])

plt.tight_layout()
plt.legend(loc=4,prop={'size':10})
str = './fcc-bcc-convexhull.png'
plt.savefig(str)
plt.show()






#+END_SRC

#+RESULTS:
*** convex hull of fcc and bcc encut=350
#+BEGIN_SRC python
from vasp import Vasp
from ase.io import read
import os

f = open('../CuPd_fcc_encut350/gs.out','r')
lines = f.readlines()
f.close()

gs_fcc_concentration,gs_fcc_energy,gs_fcc_fitenergy,gs_fcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_fcc_concentration.append(float(c))
    gs_fcc_energy.append(float(e))
    gs_fcc_fitenergy.append(float(fe))
    gs_fcc_index.append(int(i))



f = open('../CuPd_fcc_encut350/fit.out','r')
lines = f.readlines()
f.close()

gs_c_fcc_concentration,gs_c_fcc_energy,gs_c_fcc_fitenergy,gs_c_fcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_c_fcc_concentration.append(float(c))
    gs_c_fcc_energy.append(float(e))
    gs_c_fcc_fitenergy.append(float(fe))
    gs_c_fcc_index.append(int(i))


f = open('../CuPd_bcc_c/gs.out','r')
lines = f.readlines()
f.close()

gs_bcc_concentration,gs_bcc_energy,gs_bcc_fitenergy,gs_bcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_bcc_concentration.append(float(c))
    gs_bcc_energy.append(float(e))
    gs_bcc_fitenergy.append(float(fe))
    gs_bcc_index.append(int(i))



f = open('../CuPd_bcc_c/fit.out','r')
lines = f.readlines()
f.close()

gs_c_bcc_concentration,gs_c_bcc_energy,gs_c_bcc_fitenergy,gs_c_bcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_c_bcc_concentration.append(float(c))
    gs_c_bcc_energy.append(float(e))
    gs_c_bcc_fitenergy.append(float(fe))
    gs_c_bcc_index.append(int(i))


import matplotlib.pyplot as plt
plt.subplot(121)
plt.plot(gs_c_fcc_concentration,gs_c_fcc_fitenergy,'gx',label=" Fitted Energies")
plt.plot(gs_fcc_concentration,gs_fcc_energy,'ko-',
     label='Known Ground State',markersize=4,
     markerfacecolor='blue',markeredgecolor='black')
plt.plot(gs_fcc_concentration,gs_fcc_fitenergy,'g+')
plt.plot(gs_c_fcc_concentration,gs_c_fcc_energy,'r+',label="known Structure")
plt.xlabel('$x_{%s}$' %'Pd')
plt.ylabel('Heat Of Formation (eV/atom)')
plt.text(0,0.04,'(a)',size=20)
plt.legend(loc=4,prop={'size':10})
plt.ylim([-0.15,0.05])
plt.subplot(122)
plt.plot(gs_c_bcc_concentration,gs_c_bcc_fitenergy,'gx',label=" Fitted Energies")
plt.plot(gs_bcc_concentration,gs_bcc_energy,'ko-',
     label='Known Ground State',markersize=4,
     markerfacecolor='blue',markeredgecolor='black')
plt.plot(gs_bcc_concentration,gs_bcc_fitenergy,'g+')
plt.plot(gs_c_bcc_concentration,gs_c_bcc_energy,'r+',label="known Structure")
plt.xlabel('$x_{%s}$' %'Pd')
plt.ylabel('Heat Of Formation (eV/atom)')
plt.text(0,0.04, '(b)', size=20)
plt.ylim([-0.15,0.05])

plt.tight_layout()
plt.legend(loc=4,prop={'size':10})
str = './fcc-bcc-convexhull-encut350.png'
plt.savefig(str)
plt.show()






#+END_SRC

#+RESULTS:
*** convex hull with encut 350 and 500
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_fcc_encut350/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut350/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 

# CuPd_bcc
n = ['0','614','494','3','1']
energy_bcc = []

for a in n:
     with jasp('../../CuPd_bcc_encut350/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy_bcc.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 

# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy_pre = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy_pre.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 

# CuPd_bcc
n = ['0','614','494','3','1']
energy_pre_bcc = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy_pre_bcc.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 



import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.plot(compo, energy,'b+-',label='fcc ground states (encut=350)')
plt.plot(compo2,energy_bcc,'r+-',label='bcc ground states (encut=350)')
plt.plot(compo, energy_pre,'gx-',label='fcc ground states (encut=500)')
plt.plot(compo2,energy_pre_bcc,'yx-',label='bcc ground states (encut=500)')
plt.text(0, -0.165, 'Cu',color='black', fontsize=13)
plt.text(0.98, -0.165, 'Pd',color='black', fontsize=13)
plt.legend(loc=2)
plt.xlabel('composition x')
plt.ylabel('Enthalpy of formation (eV/atom)')
str = './convexhull-encut350-500.png'
plt.savefig(str)

plt.show()
#+END_SRC

#+RESULTS:

*** convex hull with relaxed structures and unrelaxed structures
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 

# CuPd_bcc
n = ['0','614','494','3','1']
energy_bcc = []

for a in n:
     with jasp('../CuPd_bcc_hp3-3/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy_bcc.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# relaxed structure
# get reference energy
filename = '../CuPd_fcc_encut500_isif3/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','76','9','28','80','1']
energy_pre = []

for a in n:
     with jasp('../CuPd_fcc_encut500_isif3/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy_pre.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 

# CuPd_bcc
n = ['0','41','6','479','3','1']
energy_pre_bcc = []

for a in n:
     with jasp('../CuPd_bcc_encut500_isif3/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy_pre_bcc.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 



import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
compo3 = [0.0, 0.25, 0.375, 0.5, 0.6666, 0.75, 0.8333,1]
compo4 = [0,0.2,0.33333,0.375,0.5,1]
plt.plot(compo, energy,'bo-',label='isif=7 fcc ground states (encut=500)')
plt.plot(compo2,energy_bcc,'ro-',label='isif=7 bcc ground states (encut=500)')
plt.plot(compo3, energy_pre,'gd-',label='relaxed fcc ground states (encut=500)')
plt.plot(compo4,energy_pre_bcc,'yo-',label='relaxed bcc ground states (encut=500)')
plt.text(0, -0.165, 'Cu',color='black', fontsize=13)
plt.text(0.98, -0.165, 'Pd',color='black', fontsize=13)
plt.legend(loc=2)
plt.xlabel('composition x')
plt.ylabel('Enthalpy of formation (eV/atom)')
str = './convexhull of relax-unrelax.png'
plt.savefig(str)

plt.show()
#+END_SRC

#+RESULTS:

** TODO Part B. Convergence effect on phase diagram
For convinience, phase diagram is drawed in a software called ORIGIN which does not rely on coding. Therefore this part is empty. We have the data file. Soon we can redraw this phase diagram based on python. 
Sorry, we will do it tomorrow :D 

** Part C. vibrational free energy
*** first try on FCC
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 


# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib01/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G


ref_Cu = Gfree_fcc(0)
ref_Pd = Gfree_fcc(1)

n = [0,27,455,457,505,28,1]
composition = [0,0.25,0.375,0.5,0.625,0.75,1]
natom = [1,4,8,8,8,4,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]/natom[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]/natom[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]/natom[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]/natom[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo, energy,'o-',label='FCC  without vibrational entropy 0K')

plt.plot(compo, energy_0,'o-',label='FCC vib 0K')

plt.plot(compo, energy_300,'o-',label='FCC vib 300K')

plt.plot(compo, energy_600,'o-',label='FCC vib 600K')

plt.plot(compo, energy_900,'o-',label='FCC vib 900K')

#plt.plot(compo, energy_pre,'go-',label=' CuPd fcc based on PBE (encut=350)')
#plt.plot(compo2,energy_pre_bcc,'yo-',label=' CuPd bcc based on PBE (encut=350)')


plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
######################### now I want to plot the free energy and place it to right side #####
plt.subplot(1,2,1)
label = ['Cu','Cu3Pd L12','Cu6Pd2 A1','Cu4Pd4 A1','Cu3Pd5','CuPd3 L12','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib01/fcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]/natom[j]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = './freeE-fcc01.png'
plt.savefig(str)
#print '[['+str+']]'
plt.show()


#+END_SRC

#+RESULTS:

*** first try on BCC
**** set energy of FCC Cu and Pd lattice as referenced energy
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_bcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]


# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_bcc(n):
  filename = '../vib01/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib01/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu = Gfree_ref(0)
ref_Pd = Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_bcc = []
for i in n:
  G_bcc.append(Gfree_bcc(i))
# when T = 0K
G_vib_0 = [G_bcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]/natom[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_bcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]/natom[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_bcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]/natom[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_bcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]/natom[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo2,energy,'o-',label='B2 without vibrational entropy 0K')
plt.plot(compo2, energy_0,'o-',label='B2 vib 0K')

plt.plot(compo2, energy_300,'o-',label='B2 vib 300K')

plt.plot(compo2, energy_600,'o-',label='B2 vib 600K')

plt.plot(compo2, energy_900,'o-',label='B2 vib 900K')


plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
################### Now plot the free energy #######
plt.subplot(1,2,1)
label = ['Cu','Cu6Pd2','Cu5Pd3','CuPd','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib01/bcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]/natom[j]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'freeE-B201-ref-fcc.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:

**** set energy of BCC Cu Pd lattice as refereced energy
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_bcc_encut500/ref_energy.out'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]


# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_bcc(n):
  filename = '../vib01/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib01/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu = Gfree_ref(0)
ref_Pd = Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_bcc = []
for i in n:
  G_bcc.append(Gfree_bcc(i))
# when T = 0K
G_vib_0 = [G_bcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]/natom[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_bcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]/natom[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_bcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]/natom[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_bcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]/natom[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo2,energy,'o-',label='B2 without vibrational entropy 0K')
plt.plot(compo2, energy_0,'o-',label='B2 vib 0K')

plt.plot(compo2, energy_300,'o-',label='B2 vib 300K')

plt.plot(compo2, energy_600,'o-',label='B2 vib 600K')

plt.plot(compo2, energy_900,'o-',label='B2 vib 900K')


plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
################### Now plot the free energy #######
plt.subplot(1,2,1)
label = ['Cu','Cu6Pd2','Cu5Pd3','CuPd','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib01/bcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]/natom[j]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'freeE-B201-ref-self.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:

*** convergence test
**** encut convergence
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get ref_force/energy
with jasp('~/research/convergence/CuPd_bcc_vib_encut550')as calc:
 atom = calc.get_atoms()
 ref_force = np.array(atom.get_forces())
 ref_energy = atom.get_potential_energy()

n = ['300','350','400','450','500','550']
energy = []
F = []
for a in n:
     with jasp('~/research/convergence/CuPd_bcc_vib_encut{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     force = atom.get_forces()
     try:
       #     print atoms0.get_forces()
            energy.append(atom.get_potential_energy()/len(atom))
            force = np.array(force)-np.array(ref_force)
            L2 = 0
            for j in range(len(ref_force)):
                F0 = np.sum(force[j])
            L2+=F0

       
            F.append(L2/(len(ref_force)/len(ref_force[0])))
      
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
import matplotlib.pyplot as plt
plt.subplot(121)
plt.plot([300,350,400,450,500,550],energy,'ro-')
plt.xlabel('encut number')
plt.ylabel('energy (eV/atom)')
plt.text(300,-4.58830, '(a)', size=20)
plt.subplot(122)
plt.plot([300,350,400,450,500,550],np.array(F),'bo-')
plt.xlabel('encut number')
plt.ylabel('force ($eV/{Angstrom}^2$)')
plt.text(300,0.0055, '(b)', size=20)
plt.tight_layout()
plt.savefig('./encut-convergence.png')
plt.show()
#+END_SRC

#+RESULTS:

**** kpoints convergence
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get ref_force/energy
with jasp('~/research/convergence/CuPdbcc_vib_encut400_kppra5000')as calc:
 atom = calc.get_atoms()
 ref_force = list(atom.get_forces())
 ref_energy = atom.get_potential_energy()

n = ['500','2000','3000','5000']
energy = []
F = []
for a in n:
     with jasp('~/research/convergence/CuPdbcc_vib_encut400_kppra{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     force = list(atom.get_forces())
     for i in range(len(force)):
        force[i]=list(force[i])
    

     try:

       #     print atoms0.get_forces()
            energy.append(atom.get_potential_energy()/len(atom))
            force = np.array(force)-np.array(ref_force)
            L2 = 0
            for j in range(len(ref_force)):
                F0 = np.sum(force[j])
            L2+=F0

       
            F.append(L2/(len(ref_force)/len(ref_force[0])))
      
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
import matplotlib.pyplot as plt
plt.subplot(121)
plt.plot([3,4,5,6],energy,'ro-')
plt.xlabel('kpoints')
plt.ylabel('energy (eV/atom)')
plt.text(3,-4.5845, '(a)', size=20)
plt.subplot(122)
plt.plot([3,4,5,6],np.array(F),'bo-')
plt.xlabel('kpoints')
plt.ylabel('force ($eV/Angstrom^2$)')
plt.text(3,0.045, '(b)', size=20)
plt.tight_layout()
plt.savefig('./kpoints-convergence.png')

plt.show()
#+END_SRC

#+RESULTS:

*** second try on FCC
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 


# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib02/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G


ref_Cu = Gfree_fcc(0)
ref_Pd = Gfree_fcc(1)

n = [0,27,455,457,505,28,1]
composition = [0,0.25,0.375,0.5,0.625,0.75,1]
natom = [1,4,8,8,8,4,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]/natom[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]/natom[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]/natom[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]/natom[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo, energy,'o-',label='FCC  without vibrational entropy 0K')

plt.plot(compo, energy_0,'o-',label='FCC vib 0K')

plt.plot(compo, energy_300,'o-',label='FCC vib 300K')

plt.plot(compo, energy_600,'o-',label='FCC vib 600K')

plt.plot(compo, energy_900,'o-',label='FCC vib 900K')

#plt.plot(compo, energy_pre,'go-',label=' CuPd fcc based on PBE (encut=350)')
#plt.plot(compo2,energy_pre_bcc,'yo-',label=' CuPd bcc based on PBE (encut=350)')


plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
######################### now I want to plot the free energy and place it to right side #####
plt.subplot(1,2,1)
label = ['Cu','Cu3Pd L12','Cu6Pd2 A1','Cu4Pd4 A1','Cu3Pd5','CuPd3 L12','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib02/fcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]/natom[j]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = './freeE-fcc02.png'
plt.savefig(str)
#print '[['+str+']]'
plt.show()


#+END_SRC

#+RESULTS:

*** second try on BCC
**** set energy of FCC Cu and Pd lattice as referenced energy
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_bcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]


# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_bcc(n):
  filename = '../vib02/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib02/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu = Gfree_ref(0)
ref_Pd = Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_bcc = []
for i in n:
  G_bcc.append(Gfree_bcc(i))
# when T = 0K
G_vib_0 = [G_bcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]/natom[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_bcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]/natom[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_bcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]/natom[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_bcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]/natom[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo2,energy,'o-',label='B2 without vibrational entropy 0K')
plt.plot(compo2, energy_0,'o-',label='B2 vib 0K')

plt.plot(compo2, energy_300,'o-',label='B2 vib 300K')

plt.plot(compo2, energy_600,'o-',label='B2 vib 600K')

plt.plot(compo2, energy_900,'o-',label='B2 vib 900K')


plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
################### Now plot the free energy #######
plt.subplot(1,2,1)
label = ['Cu','Cu6Pd2','Cu5Pd3','CuPd','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib02/bcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]/natom[j]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'freeE-B202-ref-fcc.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:

**** set energy of BCC Cu Pd lattice as refereced energy
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_bcc_encut500/ref_energy.out'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]


# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_bcc(n):
  filename = '../vib02/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib02/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu = Gfree_ref(0)
ref_Pd = Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_bcc = []
for i in n:
  G_bcc.append(Gfree_bcc(i))
# when T = 0K
G_vib_0 = [G_bcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]/natom[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_bcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]/natom[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_bcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]/natom[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_bcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]/natom[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo2,energy,'o-',label='B2 without vibrational entropy 0K')
plt.plot(compo2, energy_0,'o-',label='B2 vib 0K')

plt.plot(compo2, energy_300,'o-',label='B2 vib 300K')

plt.plot(compo2, energy_600,'o-',label='B2 vib 600K')

plt.plot(compo2, energy_900,'o-',label='B2 vib 900K')


plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
################### Now plot the free energy #######
plt.subplot(1,2,1)
label = ['Cu','Cu6Pd2','Cu5Pd3','CuPd','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib02/bcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]/natom[j]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'freeE-B202-ref-self.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:

*** combine both FCC and BCC

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]


# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib01/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib02/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu = Gfree_ref(0)
ref_Pd = Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]/natom[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]/natom[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]/natom[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]/natom[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]

plt.plot(compo2,energy,'x-',label='B2 without vibrational entropy 0K')
plt.plot(compo2, energy_0,'x-',label='B2 vib 0K')

plt.plot(compo2, energy_300,'x-',label='B2 vib 300K')

plt.plot(compo2, energy_600,'x-',label='B2 vib 600K')

plt.plot(compo2, energy_900,'x-',label='B2 vib 900K')



plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')

# draw fcc part
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 


# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib02/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G


ref_Cu = Gfree_fcc(0)
ref_Pd = Gfree_fcc(1)

n = [0,27,455,457,505,28,1]
composition = [0,0.25,0.375,0.5,0.625,0.75,1]
natom = [1,4,8,8,8,4,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]/natom[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]/natom[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]/natom[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]/natom[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]

plt.plot(compo, energy,'o-',label='FCC  without vibrational entropy 0K')

plt.plot(compo, energy_0,'o-',label='FCC vib 0K')

plt.plot(compo, energy_300,'o-',label='FCC vib 300K')

plt.plot(compo, energy_600,'o-',label='FCC vib 600K')

plt.plot(compo, energy_900,'o-',label='FCC vib 900K')

#plt.plot(compo, energy_pre,'go-',label=' CuPd fcc based on PBE (encut=350)')
#plt.plot(compo2,energy_pre_bcc,'yo-',label=' CuPd bcc based on PBE (encut=350)')


plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
plt.savefig('./bcc01+fcc02.png')


plt.show()


#+END_SRC

#+RESULTS:


#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]


# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_bcc(n):
  filename = '../vib-dr0.15/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib-dr0.15/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu = Gfree_ref(0)
ref_Pd = Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_bcc = []
for i in n:
  G_bcc.append(Gfree_bcc(i))
# when T = 0K
G_vib_0 = [G_bcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_bcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_bcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_bcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]

plt.plot(compo2,energy,'x-',label='B2 without vibrational entropy 0K')
plt.plot(compo2, energy_0,'x-',label='B2 vib 0K')

plt.plot(compo2, energy_300,'x-',label='B2 vib 300K')

plt.plot(compo2, energy_600,'x-',label='B2 vib 600K')

plt.plot(compo2, energy_900,'x-',label='B2 vib 900K')



plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')

# draw fcc part
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 


# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib-dr0.15/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G


ref_Cu = Gfree_fcc(0)
ref_Pd = Gfree_fcc(1)

n = [0,27,455,457,505,28,1]
composition = [0,0.25,0.375,0.5,0.625,0.75,1]
natom = [1,4,8,8,8,4,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]

plt.plot(compo, energy,'o-',label='FCC  without vib 0K')

plt.plot(compo, energy_0,'o-',label='FCC + vib 0K')

plt.plot(compo, energy_300,'o-',label='FCC + vib 300K')

plt.plot(compo, energy_600,'o-',label='FCC + vib 600K')

plt.plot(compo, energy_900,'o-',label='FCC + vib 900K')

#plt.plot(compo, energy_pre,'go-',label=' CuPd fcc based on PBE (encut=350)')
#plt.plot(compo2,energy_pre_bcc,'yo-',label=' CuPd bcc based on PBE (encut=350)')


plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
#plt.savefig('./bcc01+fcc02.png')


plt.show()


#+END_SRC

#+RESULTS:

*** phase diagram based on best fit of stiffness vs bond length method
*** vibrational free energy profile based on fitfc 
**** combine fcc and bcc
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]


# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib-fitfc/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib-fitfc/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu = Gfree_ref(0)
ref_Pd = Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]

plt.plot(compo2,energy,'x-',label='B2 without vibrational free energy (0K)')
plt.plot(compo2, energy_0,'x-',label='B2 with vibrational free energy (0K)')

plt.plot(compo2, energy_300,'x-',label='B2 with vibrational free energy (300K)')

plt.plot(compo2, energy_600,'x-',label='B2 with vibrational free energy (600K)')

plt.plot(compo2, energy_900,'x-',label='B2 with vibrational free enerngy (900K)')



plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')

# draw fcc part
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 


# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib-fitfc/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G


ref_Cu = Gfree_fcc(0)
ref_Pd = Gfree_fcc(1)

n = [0,27,455,457,505,28,1]
composition = [0,0.25,0.375,0.5,0.625,0.75,1]
natom = [1,4,8,8,8,4,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)
E_L10 = -9.141597
enthalpy_L10 = E_L10/2 -0.5*Cu_ref -0.5*Pd_ref
Gfree = Gfree_fcc(3)
L10_0 = Gfree[0]+enthalpy_L10 - 0.5*ref_Cu[0]-0.5*ref_Pd[0]
L10_300 = Gfree[1]+enthalpy_L10 - 0.5*ref_Cu[1]-0.5*ref_Pd[1]
L10_600 = Gfree[2]+enthalpy_L10 - 0.5*ref_Cu[2]-0.5*ref_Pd[2]
L10_900 = Gfree[3]+enthalpy_L10 - 0.5*ref_Cu[3]-0.5*ref_Pd[3]

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
#plt.plot(0.5,enthalpy_L10,'o',label='L10 without vibrational free energy (0K)')
#plt.plot(0.5,L10_0,'o',label='L10 with vibrational free energy (0K)')
#plt.plot(0.5,L10_300,'o',label='L10 with vibrational free energy (300K)')
#plt.plot(0.5,L10_600,'o',label='L10 with vibrational free energy (600K)')
#plt.plot(0.5,L10_900,'o',label='L10 with vibrational free energy (900K)')
plt.plot(compo, energy,'o-',label='FCC without vibrational free energy (0K)')

plt.plot(compo, energy_0,'o-',label='FCC with vibrational free energy (0K)')

plt.plot(compo, energy_300,'o-',label='FCC with vibrational free energy (300K)')

plt.plot(compo, energy_600,'o-',label='FCC with vibrational free energy (600K)')

plt.plot(compo, energy_900,'o-',label='FCC with vibrational free energy (900K)')

#plt.plot(compo, energy_pre,'go-',label=' CuPd fcc based on PBE (encut=350)')
#plt.plot(compo2,energy_pre_bcc,'yo-',label=' CuPd bcc based on PBE (encut=350)')


plt.legend(loc='best',prop={'size':8})
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')

plt.savefig('./fitfc-sum.png')


plt.show()


#+END_SRC

#+RESULTS:

**** bcc
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_bcc_encut500/ref_energy.out'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_bcc(n):
  filename = '../vib-fitfc/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib-fitfc/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu =Gfree_ref(0)
ref_Pd =Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_bcc = []
for i in n:
  G_bcc.append(Gfree_bcc(i))
# when T = 0K
G_vib_0 = [G_bcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_bcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_bcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_bcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo2,energy,'x-',label='B2 without vibrational free energy (0K)')
plt.plot(compo2, energy_0,'x-',label='B2 with vibrational free energy (0K)')

plt.plot(compo2, energy_300,'x-',label='B2 with vibrational free energy (300K)')

plt.plot(compo2, energy_600,'x-',label='B2 with vibrational free energy (600K)')

plt.plot(compo2, energy_900,'x-',label='B2 with vibrational free enerngy (900K)')



plt.legend(loc='best',prop={'size':8})
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')

plt.subplot(1,2,1)
label = ['Cu','Cu6Pd2','Cu5Pd3','CuPd','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib-fitfc/bcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend(loc='best',prop={'size':8})
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
plt.tight_layout()
plt.savefig('fitfcbcc.png')

plt.show()


#+END_SRC

#+RESULTS:

**** fcc
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os

# draw fcc part
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 


# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib-fitfc/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G


ref_Cu = Gfree_fcc(0)
ref_Pd = Gfree_fcc(1)

n = [0,27,455,457,505,28,1]
composition = [0,0.25,0.375,0.5,0.625,0.75,1]
natom = [1,4,8,8,8,4,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo, energy,'o-',label='FCC without vibrational free energy (0K)')

plt.plot(compo, energy_0,'o-',label='FCC with vibrational free energy (0K)')

plt.plot(compo, energy_300,'o-',label='FCC with vibrational free energy (300K)')

plt.plot(compo, energy_600,'o-',label='FCC with vibrational free energy (600K)')

plt.plot(compo, energy_900,'o-',label='FCC with vibrational free energy (900K)')


plt.legend(loc='best',prop={'size':8})
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
#plt.savefig('./bcc01+fcc02.png')
plt.subplot(1,2,1)
label = ['Cu','Cu3Pd L12','Cu6Pd2 A1','Cu4Pd4 A1','Cu3Pd5','CuPd3 L12','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib-fitfc/fcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend(loc='best',prop={'size':8})
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
plt.savefig('fitfcfcc.png')

plt.show()


#+END_SRC

#+RESULTS:

**** free energy profile for pure Cu Pd in fcc and bcc
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
T = np.linspace(0,1000,21)
filename = '../vib-fitfc/fcc-0-fvib'
with open(filename) as f:
    lines = f.readlines()
G = []
for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
plt.plot(T,G,'o-',label='fcc Cu')

filename = '../vib-fitfc/fcc-1-fvib'
with open(filename) as f:
    lines = f.readlines()
G = []
for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
plt.plot(T,G,'o-',label='fcc Pd')

filename = '../vib-fitfc/bcc-0-fvib'
with open(filename) as f:
    lines = f.readlines()
G = []
for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
plt.plot(T,G,'o-',label='bcc Cu')

filename = '../vib-fitfc/bcc-1-fvib'
with open(filename) as f:
    lines = f.readlines()
G = []
for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
plt.plot(T,G,'o-',label='bcc Pd')

plt.legend(loc='best',prop={'size':8})
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
plt.savefig('fitfc-ref.png')

plt.show()


#+END_SRC

#+RESULTS:

*** vibrational entropy based on fitfc
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# referenced entropy of Cu

filename = '../convergence-vib/dr/fcc-0-0.015/svib'
with open(filename) as f:
    lines = f.readlines()
S_Cu = []
for i,line in enumerate(lines):
     S_Cu += [np.array(line[0:].split(), dtype=float)[0]/8.617*100000]
# referenced entropy of Pd
filename = '../convergence-vib/dr/fcc-1-0.015/svib'
with open(filename) as f:
    lines = f.readlines()
S_Pd = []
for i,line in enumerate(lines):
     S_Pd += [np.array(line[0:].split(), dtype=float)[0]/8.617*100000]
# this is L12
filename = '../convergence-vib/dr/fcc-27-0.015/svib'
with open(filename) as f:
    lines = f.readlines()
S_l12 = []
for i,line in enumerate(lines):
     S_l12 += [np.array(line[0:].split(), dtype=float)[0]/8.617*100000]
# this is B2 
filename = '../convergence-vib/er/3-er9/svib'
with open(filename) as f:
    lines = f.readlines()
Sb2 = []
for i,line in enumerate(lines):
     Sb2 += [np.array(line[0:].split(), dtype=float)[0]/8.617*100000]
 

T = np.linspace(0,1000,21)

Hl12 = np.array(S_l12) - 0.25*np.array(S_Pd) - 0.75* np.array(S_Cu)
Hb2 = np.array(Sb2) - 0.5*np.array(S_Pd) - 0.5* np.array(S_Cu)
plt.plot(T,Hl12,'o-',label='vibrational formation entropy of L12 Cu3Pd')
plt.plot(T,Hb2,'o-',label='vibrational formation entropy of B2 CuPd')

plt.legend(loc='best',prop={'size':8})
plt.xlabel('T(K)')
plt.ylabel('vibrational formation Entropy (Bolzmann Constant kB)')
plt.savefig('vibentropy.png')

plt.show()


#+END_SRC

#+RESULTS:

*** convergence - cut off energy
**** B2 structure - index 3
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of bcc #######
n = [3] # B2 structure CuPd
encut = ['350','425','500']
label = ['CuPd B2']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/encut-result/bcc-{}-encut{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for e in encut:
    plt.plot(T, Gfree(num,i,e),'-',label='B2 CuPd encut ={}'.format(e))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-B2-encut.png'
plt.savefig(str)
plt.show()
#+END_SRC
**** FCC Cu - index 0
#+RESULTS:
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [0] #
encut = ['350','425','500']
label = ['CuPd B2']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/encut-result/fcc-{}-encut{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for e in encut:
    plt.plot(T, Gfree(num,i,e),'-',label=' fcc Cu encut ={}'.format(e))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-0-encut.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:
**** FCC Pd index 1
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [1] #
encut = ['350','425','500']
label = ['CuPd B2']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/encut-result/fcc-{}-encut{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for e in encut:
    plt.plot(T, Gfree(num,i,e),'-',label=' fcc Pd encut ={}'.format(e))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-1-encut.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:
**** FCC L12 - index 27
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [27] #
encut = ['350','425','500']

# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/encut-result/fcc-{}-encut{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for e in encut:
    plt.plot(T, Gfree(num,i,e),'-',label=' fcc L12 Cu3Pd encut ={}'.format(e))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-27-encut.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:
*** convergence - k-points
**** B2 structure - index 3
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [3] #
kpts = ['3000','5000','8000']
label = ['5X5X5','6X6X6','7X7X7']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/kpoints-result/bcc-{}-kppra{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for j,e in enumerate(kpts):
    plt.plot(T, Gfree(num,i,e),'-',label=' fcc Cu super-cell kpoints ={}'.format(label[j]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-3-kpts.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:
**** FCC Pd - index 1
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [1] #
kpts = ['3000','5000','8000']
label = ['5X5X5','6X6X6','7X7X7']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/kpoints-result/fcc-{}-kppra{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for j,e in enumerate(kpts):
    plt.plot(T, Gfree(num,i,e),'-',label=' fcc Pd super-cell kpoints ={}'.format(label[j]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-1-kpts.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:
**** FCC L12 Cu3Pd - index 27
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [27] #
kpts = ['3000','5000','8000']
label = ['5X5X5','6X6X6','7X7X7']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/kpoints-result/fcc-{}-kppra{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for j,e in enumerate(kpts):
    plt.plot(T, Gfree(num,i,e),'-',label=' fcc L12 super-cell kpoints ={}'.format(label[j]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-27-kpts.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:
**** FCC Cu - index 0
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [0] #
kpts = ['3000','5000','8000']
label = ['5X5X5','6X6X6','7X7X7']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/kpoints-result/fcc-{}-kppra{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for j,e in enumerate(kpts):
    plt.plot(T, Gfree(num,i,e),'-',label=' bcc CuPd super-cell kpoints ={}'.format(label[j]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-0-kpts.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:

*** convergence - displacement of perturbed atom

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [0] #
kpts = ['6','9','10']
label = ['R = 6 Ang (16 atoms)','R = 9 Ang (32 atoms)','R = 10 Ang (42 atoms)']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/er/fvib-{}-er{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for j,e in enumerate(kpts):
    plt.plot(T, Gfree(num,i,e),'-',label='B2 super-cell {}'.format(label[j]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-3-er.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
n = [3] # B2 structure CuPd
encut = ['350','425','500']
label = ['CuPd B2']
# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_vib2/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'bo',label='dr=0.15 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL,bend,'bo',label='dr=0.15 Ang')
plt.ylim([-1,0.1])
filename = '../../CuPd_bcc_encut500_vib/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'ro',label='dr=0.2 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL,bend,'ro',label='dr=0.2 Ang')
plt.ylim([-1,0.1])
filename = '../../CuPd_bcc_encut500_vib3/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='dr=0.4 Ang')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bondL,bend,'yo',label='dr=0.4 Ang')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('Cu-Cu.png')
plt.show()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
n = [3] # B2 structure CuPd
encut = ['350','425','500']
label = ['CuPd B2']
# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_vib2/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'bo',label='dr=0.15 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL,bend,'bo',label='dr=0.15 Ang')
plt.ylim([-1,0.1])
filename = '../../CuPd_bcc_encut500_vib/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'ro',label='dr=0.2 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL,bend,'ro',label='dr=0.2 Ang')
plt.ylim([-1,0.1])
filename = '../../CuPd_bcc_encut500_vib3/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='dr=0.4 Ang')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bondL,bend,'yo',label='dr=0.4 Ang')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('Cu-Pd.png')
plt.show()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######

# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_vib2/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'bo',label='dr=0.15 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL,bend,'bo',label='dr=0.15 Ang')
plt.ylim([-1,0.1])
filename = '../../CuPd_bcc_encut500_vib/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'ro',label='dr=0.2 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL,bend,'ro',label='dr=0.2 Ang')
plt.ylim([-1,0.1])
filename = '../../CuPd_bcc_encut500_vib3/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='dr=0.4 Ang')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bondL,bend,'yo',label='dr=0.4 Ang')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('Pd-Pd.png')
plt.show()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
n = [3] # B2 structure CuPd
encut = ['350','425','500']
label = ['CuPd B2']
# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.2/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'bo',label='dr=0.15 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL,bend,'bo',label='dr=0.15 Ang')
plt.ylim([-1,0.1])
filename = '../../CuPd_bcc_encut500_dr0.1/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'ro',label='dr=0.2 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL,bend,'ro',label='dr=0.2 Ang')
plt.ylim([-1,0.1])
filename = '../../CuPd_bcc_encut500_dr0.05/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='dr=0.4 Ang')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bondL,bend,'yo',label='dr=0.4 Ang')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
#plt.savefig('Cu-Pd.png')
plt.show()
#+END_SRC

#+RESULTS:


*** modify stiffness vs bond length relationship
**** bond -stiffness profile
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######

# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_vib4/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'bo',label='non-ground state')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'bo',label='non-ground state')
plt.ylim([-1,0.1])
def fits(b):
  return (1.23397*b**5-30.23760*b**3+321.28*b-447.69)
def fitb(b):
  return (-0.8143*b**5+21.84*b**3-260.48*b+390.01)


filename = '../../CuPd_bcc_encut500_vib2/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
bond = np.linspace(min(bondL0),max(bondL0))

plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='ground state')  
plt.plot(bond,[fits(i) for i in bond],'y-',label='fitted stiffness')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bond,[fitb(i) for i in bond],'b-',label='fitted stiffness')
plt.plot(bondL,bend,'yo',label='ground state')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('Cu-Pd-add.png')
plt.show()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######

# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_vib4/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'bo',label='non-ground state')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'bo',label='non-ground state')
plt.ylim([-1,0.1])
def fits(b):
  return (0.02741*b**5+0.76302*b**3-30.05024*b+62.942)
def fitb(b):
  return (-0.23241*b**5+6.33916*b**3-76.355*b+114.51)


filename = '../../CuPd_bcc_encut500_vib2/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
bond = np.linspace(min(bondL0),max(bondL0))

plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='ground state')  
plt.plot(bond,[fits(i) for i in bond],'y-',label='fitted stiffness')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bond,[fitb(i) for i in bond],'b-',label='fitted stiffness')
plt.plot(bondL,bend,'yo',label='ground state')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('Cu-Cu-add.png')
plt.show()
#+END_SRC

#+RESULTS:




#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######

# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_vib4/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'bo',label='non-ground state')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'bo',label='non-ground state')
plt.ylim([-1,0.1])
def fits(b):
  return (-1.42630*b**5+44.34669*b**3-617.92432*b+1003.79980)
def fitb(b):
  return (-0.45471*b**5+12.24974*b**3-146.09214*b+218.18655)


filename = '../../CuPd_bcc_encut500_vib2/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
bond = np.linspace(min(bondL0),max(bondL0))

plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='ground state')  
plt.plot(bond,[fits(i) for i in bond],'y-',label='fitted stiffness')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bond,[fitb(i) for i in bond],'b-',label='fitted stiffness')
plt.plot(bondL,bend,'yo',label='ground state')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('Pd-Pd-add.png')
plt.show()
#+END_SRC

#+RESULTS:

#+RESULTS:

**** vibrational contribution - 
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]


# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_bcc(n):
  filename = '../vib-dr0.15-addnongs/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib-dr0.15-addnongs/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu = Gfree_ref(0)
ref_Pd = Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_bcc = []
for i in n:
  G_bcc.append(Gfree_bcc(i))
# when T = 0K
G_vib_0 = [G_bcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_bcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_bcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_bcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]

plt.plot(compo2,energy,'x-',label='B2 without vibrational entropy 0K')
plt.plot(compo2, energy_0,'x-',label='B2 vib 0K')

plt.plot(compo2, energy_300,'x-',label='B2 vib 300K')

plt.plot(compo2, energy_600,'x-',label='B2 vib 600K')

plt.plot(compo2, energy_900,'x-',label='B2 vib 900K')



plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')

# draw fcc part
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 


# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib-dr0.15-addnongs/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G


ref_Cu = Gfree_fcc(0)
ref_Pd = Gfree_fcc(1)

n = [0,27,455,457,505,28,1]
composition = [0,0.25,0.375,0.5,0.625,0.75,1]
natom = [1,4,8,8,8,4,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]

plt.plot(compo, energy,'o-',label='FCC  without vib 0K')

plt.plot(compo, energy_0,'o-',label='FCC + vib 0K')

plt.plot(compo, energy_300,'o-',label='FCC + vib 300K')

plt.plot(compo, energy_600,'o-',label='FCC + vib 600K')

plt.plot(compo, energy_900,'o-',label='FCC + vib 900K')

#plt.plot(compo, energy_pre,'go-',label=' CuPd fcc based on PBE (encut=350)')
#plt.plot(compo2,energy_pre_bcc,'yo-',label=' CuPd bcc based on PBE (encut=350)')


plt.legend(loc='best',prop={'size':8})
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
plt.savefig('./addnongs.png')


plt.show()


#+END_SRC

#+RESULTS:

**** very accurate fitting
***** free energy profile for fcc 
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os

# draw fcc part
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 


# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib-2/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G


ref_Cu = Gfree_fcc(0)
ref_Pd = Gfree_fcc(1)

n = [0,27,455,457,505,28,1]
composition = [0,0.25,0.375,0.5,0.625,0.75,1]
natom = [1,4,8,8,8,4,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo, energy,'o-',label='FCC without vib 0K')

plt.plot(compo, energy_0,'o-',label='FCC + vib 0K')

plt.plot(compo, energy_300,'o-',label='FCC + vib 300K')

plt.plot(compo, energy_600,'o-',label='FCC + vib 600K')

plt.plot(compo, energy_900,'o-',label='FCC + vib 900K')



plt.legend(loc='best',prop={'size':8})
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
#plt.savefig('./bcc01+fcc02.png')
plt.subplot(1,2,1)
label = ['Cu','Cu3Pd L12','Cu6Pd2 A1','Cu4Pd4 A1','Cu3Pd5','CuPd3 L12','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib-2/fcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend(loc='best',prop={'size':8})
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
plt.savefig('vibfcc.png')

plt.show()


#+END_SRC

#+RESULTS:

***** free energy profile for bcc
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_bcc_encut500/ref_energy.out'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_bcc(n):
  filename = '../vib-2/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib-2/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu =Gfree_ref(0)
ref_Pd =Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_bcc = []
for i in n:
  G_bcc.append(Gfree_bcc(i))
# when T = 0K
G_vib_0 = [G_bcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_bcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_bcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_bcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]
plt.subplot(1,2,2)
plt.plot(compo2,energy,'x-',label='B2 without vibrational entropy 0K')
plt.plot(compo2, energy_0,'x-',label='B2 + vib 0K')

plt.plot(compo2, energy_300,'x-',label='B2 + vib 300K')

plt.plot(compo2, energy_600,'x-',label='B2 + vib 600K')

plt.plot(compo2, energy_900,'x-',label='B2 + vib 900K')



plt.legend(loc='best',prop={'size':8})
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')

plt.subplot(1,2,1)
label = ['Cu','Cu6Pd2','Cu5Pd3','CuPd','Pd']
# obtain vibrational free energy
def Gfree(n,j):
  filename = '../vib-2/bcc-{}-fvib'.format(n)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  plt.plot(T, Gfree(num,i),'-',label='{}'.format(label[i]))
plt.legend(loc='best',prop={'size':8})
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
plt.tight_layout()
plt.savefig('vibbcc.png')

plt.show()


#+END_SRC

#+RESULTS:

***** combination of fcc and bcc
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]


# CuPd_bcc
n = ['0','614','494','3','1']
energy = []

for a in n:
     with jasp('../../CuPd_bcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 
# obtain vibrational free energy
def Gfree_bcc(n):
  filename = '../vib-2/bcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G
def Gfree_ref(n):
  filename = '../vib-2/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

ref_Cu =Gfree_ref(0)
ref_Pd =Gfree_ref(1)

n = [0,614,494,3,1]
composition = [0,0.25,0.375,0.5,1]
natom = [1,8,8,2,1]
G_bcc = []
for i in n:
  G_bcc.append(Gfree_bcc(i))
# when T = 0K
G_vib_0 = [G_bcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_bcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_bcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_bcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]

plt.plot(compo2,energy,'x-',label='B2 without vibrational free energy 0K')
plt.plot(compo2, energy_0,'x-',label='B2 with vibrational free energy 0K')

plt.plot(compo2, energy_300,'x-',label='B2 with vibrational free energy 300K')

plt.plot(compo2, energy_600,'x-',label='B2 with vibrational free energy 600K')

plt.plot(compo2, energy_900,'x-',label='B2 with vibrational free energy 900K')



plt.legend()
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')

# draw fcc part
# get reference energy
filename = '../../CuPd_fcc_encut500/ref_energy.in'
with open(filename) as f:
  lines = f.readlines()
E_ref = []
for line in lines:
  E_ref += [np.array(line[0:].split(), dtype=float)[0]]
  
Cu_ref = E_ref[0]
Pd_ref = E_ref[1]

# higher accuracy CuPd_fcc
n = ['0','27','455','457','505','28','1']
energy = []

for a in n:
     with jasp('../../CuPd_fcc_encut500/{0}'.format(a)) as calc:
      atom = calc.get_atoms()
     n = len(atom)
     composition = 1.0
     ele =  atom.get_chemical_symbols()
   

     for e in ele:
       if e == 'Cu':
        composition = composition - 1.0/n 
     try:
       #     print atoms0.get_forces()
            energy.append((atom.get_potential_energy() -Cu_ref*len(atom)*(1-composition)-Pd_ref*composition*len(atom))/len(atom))
     except (VaspSubmitted, VaspQueued):
            print '{0} not finished!'.format(a) 


# obtain vibrational free energy
def Gfree_fcc(n):
  filename = '../vib-2/fcc-{}-fvib'.format(n)
  with open(filename) as f:  
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
   if i==0 or i==6 or i == 12 or i==18:
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G


ref_Cu = Gfree_fcc(0)
ref_Pd = Gfree_fcc(1)

n = [0,27,455,457,505,28,1]
composition = [0,0.25,0.375,0.5,0.625,0.75,1]
natom = [1,4,8,8,8,4,1]
G_fcc = []
for i in n:
  G_fcc.append(Gfree_fcc(i))
# when T = 0K
G_vib_0 = [G_fcc[i][0] for i in range(len(n))]
for i in range(len(G_vib_0)):
  G_vib_0[i]=(G_vib_0[i]-(1-composition[i])*ref_Cu[0]-(composition[i])*ref_Pd[0])
energy_0 = np.array(energy)+np.array(G_vib_0)

# when T = 300K
G_vib_300 = [G_fcc[i][1] for i in range(len(n))]
for i in range(len(G_vib_300)):
  G_vib_300[i]=(G_vib_300[i]-(1-composition[i])*ref_Cu[1]-(composition[i])*ref_Pd[1])
energy_300 = np.array(energy)+np.array(G_vib_300)

# when T = 600K
G_vib_600 = [G_fcc[i][2] for i in range(len(n))]
for i in range(len(G_vib_600)):
 G_vib_600[i]=(G_vib_600[i]-(1-composition[i])*ref_Cu[2]-(composition[i])*ref_Pd[2])
energy_600 = np.array(energy)+np.array(G_vib_600)

# when T = 900K
G_vib_900 = [G_fcc[i][3] for i in range(len(n))]
for i in range(len(G_vib_900)):
  G_vib_900[i]=(G_vib_900[i]-(1-composition[i])*ref_Cu[3]-(composition[i])*ref_Pd[3])
energy_900 = np.array(energy)+np.array(G_vib_900)

import matplotlib.pyplot as plt
compo = [0,0.25,0.375,0.5,0.625,0.75,1]
compo2 = [0,0.25,0.375,0.5,1]

plt.plot(compo, energy,'o-',label='FCC  without vibrational free energy 0K')

plt.plot(compo, energy_0,'o-',label='FCC with vibrational free energy 0K')

plt.plot(compo, energy_300,'o-',label='FCC with vibrational free energy 300K')

plt.plot(compo, energy_600,'o-',label='FCC with vibrational free energy 600K')

plt.plot(compo, energy_900,'o-',label='FCC with vibrational free energy  900K')



plt.legend(prop={'size':8})
plt.xlabel('Pd composition')
plt.ylabel('Heat of formation (eV/atom)')
#plt.savefig('./bcc01+fcc02.png')
plt.savefig('vib2.png')

plt.show()


#+END_SRC

#+RESULTS:

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######

# obtain vibrational free energy
# take Cu-Cu
def fits(b):
  return (-0.97286*b**5+28.3739*b**3-373.177*b+590.07700)
def fitb(b):
  return (0.00165*b**5-0.09814*b**3+2.10067*b-4.04252)


filename = '../../CuPd_bcc_encut500_vib2-cp/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
bond = np.linspace(min(bondL),max(bondL))

plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='ground state')  
plt.plot(bond,[fits(i) for i in bond],'y-',label='fitted stiffness')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bond,[fitb(i) for i in bond],'b-',label='fitted stiffness')
plt.plot(bondL,bend,'yo',label='ground state')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('Cu-Pd-accurage.png')
plt.show()
#+END_SRC

#+RESULTS:

#+RESULTS:
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######

# obtain vibrational free energy
# take Cu-Cu
def fits(b):
  return (-0.43713*b**5+12.5777*b**3-163.94279*b+258.53407)
def fitb(b):
  return (0.02979*b**5-0.89141*b**3+11.88742*b-18.83066)


filename = '../../CuPd_bcc_encut500_vib2/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
bond = np.linspace(min(bondL),max(bondL))

plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='ground state')  
plt.plot(bond,[fits(i) for i in bond],'y-',label='fitted stiffness')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bond,[fitb(i) for i in bond],'b-',label='fitted stiffness')
plt.plot(bondL,bend,'yo',label='ground state')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('Cu-Cu-accurage.png')
plt.show()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######

# obtain vibrational free energy
# take Cu-Cu
def fits(b):
  return (-0.6098*b**5+19.23*b**3-275.30341*b+455.64)
def fitb(b):
  return (0.1153*b**5-3.43436*b**3+46.2756*b-74.17)


filename = '../../CuPd_bcc_encut500_vib2/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
bond = np.linspace(min(bondL),max(bondL))

plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='ground state')  
plt.plot(bond,[fits(i) for i in bond],'y-',label='fitted stiffness')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bond,[fitb(i) for i in bond],'b-',label='fitted stiffness')
plt.plot(bondL,bend,'yo',label='ground state')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
plt.savefig('Pd-Pd-accurage.png')
plt.show()
#+END_SRC

#+RESULTS:
**** test displacement of atom
***** Cu-Cu bond
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
filename = '../../CuPd_bcc_encut500_dr0.4/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ko',label='dr = 0.4 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ko',label='dr = 0.4 Ang')


# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.2/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'bo',label='dr = 0.2 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'bo',label='dr = 0.2 Ang')

# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.1/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ro',label='dr = 0.1 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ro',label='dr = 0.1 Ang')

# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.05/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'yo',label='dr = 0.05 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'yo',label='dr = 0.05 Ang')


# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.02/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'go',label='dr = 0.02 Ang')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'go',label='dr = 0.02 Ang')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()

plt.savefig('Cu-Cu-testdr.png')
plt.show()
#+END_SRC

#+RESULTS:
***** Cu-Pd bond
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
filename = '../../CuPd_bcc_encut500_dr0.4/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ko',label='dr = 0.4 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ko',label='dr = 0.4 Ang')


# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.2/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'bo',label='dr = 0.2 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'bo',label='dr = 0.2 Ang')

# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.1/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ro',label='dr = 0.1 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ro',label='dr = 0.1 Ang')

# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.05/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'yo',label='dr = 0.05 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'yo',label='dr = 0.05 Ang')


# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.02/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'go',label='dr = 0.02 Ang')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'go',label='dr = 0.02 Ang')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()

plt.savefig('Cu-Pd-testdr.png')
plt.show()
#+END_SRC

#+RESULTS:

#+RESULTS:
***** Pd-Pd bond
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
filename = '../../CuPd_bcc_encut500_dr0.4/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ko',label='dr = 0.4 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ko',label='dr = 0.4 Ang')



# obtain vibrational free energy
# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.2/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'bo',label='dr = 0.2 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'bo',label='dr = 0.2 Ang')

# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.1/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ro',label='dr = 0.1 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ro',label='dr = 0.1 Ang')

# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.05/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'yo',label='dr = 0.05 Ang')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'yo',label='dr = 0.05 Ang')


# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.02/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'go',label='dr = 0.02 Ang')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'go',label='dr = 0.02 Ang')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()

plt.savefig('Pd-Pd-testdr.png')
plt.show()
#+END_SRC

#+RESULTS:

***** use more accurate force calculation
****** Cu-Cu bond
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
filename = '../../CuPd_bcc_encut500_dr0.02ac/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ro',label='dr = 0.02 Ang (EDIFFG=-0.0001)')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ro',label='dr = 0.02 Ang (EDIFFG=-0.0001)')





# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.02/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'go',label='dr = 0.02 Ang (EDIFF=0.0001)')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best',prop={'size':8})
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'go',label='dr = 0.02 Ang (EDIFF=0.0001)')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best',prop={'size':8})
plt.tight_layout()

plt.savefig('Cu-Cu-testaccurate.png')
plt.show()
#+END_SRC

#+RESULTS:
****** Cu-Pd bond
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
filename = '../../CuPd_bcc_encut500_dr0.02ac/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ro',label='dr = 0.02 Ang (EDIFFG=-0.0001)')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ro',label='dr = 0.02 Ang (EDIFFG=-0.0001)')





# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.02/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'go',label='dr = 0.02 Ang (EDIFF=0.0001)')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best',prop={'size':8})
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'go',label='dr = 0.02 Ang (EDIFF=0.0001)')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best',prop={'size':8})
plt.tight_layout()

plt.savefig('Cu-Pd-testaccurate.png')
plt.show()
#+END_SRC

#+RESULTS:

#+RESULTS:
****** Pd-Pd bond
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
filename = '../../CuPd_bcc_encut500_dr0.02ac/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ro',label='dr = 0.02 Ang (EDIFFG=-0.0001)')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ro',label='dr = 0.02 Ang (EDIFFG=-0.0001)')





# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.02/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'go',label='dr = 0.02 Ang (EDIFF=0.0001)')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best',prop={'size':8})
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'go',label='dr = 0.02 Ang (EDIFF=0.0001)')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best',prop={'size':8})
plt.tight_layout()

plt.savefig('Pd-Pd-testaccurate.png')
plt.show()
#+END_SRC

#+RESULTS:

***** use more accurate force calculation
****** Cu-Cu bond
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
filename = '../../CuPd_bcc_encut500_dr0.02kpt/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ro',label='dr = 0.02 Ang (kpoints 7X7X7)')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ro',label='dr = 0.02 Ang (kpoints 7X7X7)')





# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.02/f_Cu-Cu.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'go',label='dr = 0.02 Ang (kpoints 5X5X5)')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best',prop={'size':8})
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'go',label='dr = 0.02 Ang (kpoints 5X5X5)')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best',prop={'size':8})
plt.tight_layout()

plt.savefig('Cu-Cu-testkpts.png')
plt.show()
#+END_SRC

#+RESULTS:
****** Cu-Pd bond
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
filename = '../../CuPd_bcc_encut500_dr0.02kpt/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ro',label='dr = 0.02 Ang (kpoints 7X7X7)')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ro',label='dr = 0.02 Ang (kpoints 7X7X7)')





# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.02/f_Cu-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'go',label='dr = 0.02 Ang (kpoints 5X5X5)')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best',prop={'size':8})
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'go',label='dr = 0.02 Ang (kpoints 5X5X5)')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best',prop={'size':8})
plt.tight_layout()

plt.savefig('Cu-Pd-testkpts.png')
plt.show()
#+END_SRC

#+RESULTS:

#+RESULTS:
****** Pd-Pd bond
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
# displacement of atom = 0.15 Ang
################### Now plot the free energy of bcc #######
filename = '../../CuPd_bcc_encut500_dr0.02kpt/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'ro',label='dr = 0.02 Ang (kpoints 7X7X7)')  
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'ro',label='dr = 0.02 Ang (kpoints 7X7X7)')





# take Cu-Cu
filename = '../../CuPd_bcc_encut500_dr0.02/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL0 = []
strech = []
bend = [] 
for i,line in enumerate(lines):
     bondL0 += [np.array(line[0:].split(), dtype=float)[0]]
     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
plt.subplot(1,2,1)
plt.plot(bondL0,strech,'go',label='dr = 0.02 Ang (kpoints 5X5X5)')  
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best',prop={'size':8})
plt.subplot(1,2,2)
plt.plot(bondL0,bend,'go',label='dr = 0.02 Ang (kpoints 5X5X5)')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best',prop={'size':8})
plt.tight_layout()

plt.savefig('Pd-Pd-testkpts.png')
plt.show()
#+END_SRC

#+RESULTS:

**** energy profile of phase diagram 
#+BEGIN_SRC python

import numpy as np
from numpy.linalg import inv,norm
from jasp import *
import matplotlib.pyplot as plt
from numpy import array, linspace, polyval
n = ['13-encut500-er35-vib-ref0-0708','13-encut500-er35-novib-ref0']# encut=500
#n = ['13-encut350-er35-500up','35-encut500-er35-550up']
plt.figure()

filename = '../../CuAuMC/phd{0}.out'.format(n[0])

with open(filename) as f:
    lines = f.readlines()

E = []
Temp = []
mu = []
x1 = []
x2 = []
U1= []
U2 = []
CP1 = []
CP2 = []
for line in lines[::]:
     mu += [np.array(line[0:-1].split(), dtype=float)[1]]
     x1 +=  [np.array(line[0:-1].split(), dtype=float)[2]]
     x2 +=  [np.array(line[0:-1].split(), dtype=float)[3]] 
     content = [np.array(line[0:-1].split(), dtype=float)[4:]]
     E += content
     Temp += [np.array(line[0:-1].split(), dtype=float)[0]]
b = np.array(E)
b1 = np.array([line[0] for line in E])
b2 = np.array([line[1] for line in E])
for i in range(len(b)):
     U1 += [b1[i]+mu[i]*x1[i]]
     U2 += [b2[i]+mu[i]*x2[i]]
T = np.array(Temp)
n = len(Temp)
pars1 = np.polyfit(T,U1,n*0.5)
pars2 = np.polyfit(T,U2,n*0.5)
temp = np.linspace(min(T),max(T))
#  dpars1 = np.polyder(pars1)
#  dpars2 = np.polyder(pars2)
E_1 = [polyval(pars1,t) for t in temp]
E_2 = [polyval(pars2,t) for t in temp]
#  Cp_1 = [polyval(dpars1,t) for t in temp]
#  Cp_2 = [polyval(dpars2,t) for t in temp]


plt.plot(T,U2,'o-',label='+vib bcc')
plt.plot(T,U1,'o-',label='+vib fcc')

#
filename1 = '../../CuAuMC/phd{0}.out'.format('13-encut500-er35-novib-ref0')

with open(filename1) as f:
    lines = f.readlines()

E = []
Temp = []
mu = []
x1 = []
x2 = []
U1= []
U2 = []
CP1 = []
CP2 = []
for line in lines[::]:
     mu += [np.array(line[0:-1].split(), dtype=float)[1]]
     x1 +=  [np.array(line[0:-1].split(), dtype=float)[2]]
     x2 +=  [np.array(line[0:-1].split(), dtype=float)[3]] 
     content = [np.array(line[0:-1].split(), dtype=float)[4:]]
     E += content
     Temp += [np.array(line[0:-1].split(), dtype=float)[0]]

b = np.array(E)
b1 = np.array([line[0] for line in E])
b2 = np.array([line[1] for line in E])
for i in range(len(b)):
     U1 += [b1[i]+mu[i]*x1[i]]
     U2 += [b2[i]+mu[i]*x2[i]]
T = np.array(Temp)
n = len(Temp)
pars1 = np.polyfit(T,U1,n*0.5)
pars2 = np.polyfit(T,U2,n*0.5)
temp = np.linspace(min(T),max(T))
#  dpars1 = np.polyder(pars1)
#  dpars2 = np.polyder(pars2)
E_1 = [polyval(pars1,t) for t in temp]
E_2 = [polyval(pars2,t) for t in temp]
#  Cp_1 = [polyval(dpars1,t) for t in temp]
#  Cp_2 = [polyval(dpars2,t) for t in temp]


plt.plot(T,U2,'o-',label='without vib bcc')
plt.plot(T,U1,'o-',label='without vib fcc')

plt.legend()
plt.ylabel('Internal energy (eV/atom/K)')
plt.xlabel('Temperature(K))')
plt.savefig('internalE.png')
plt.show()
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt


filename = '../../CuPd_bcc_encut500_vib2/f_Pd-Pd.dat'
with open(filename) as f:
    lines = f.readlines()
bondL = []
strech = []
bend = [] 
for i,line in enumerate(lines):
   if np.array(line[0:].split(),dtype=float)[0]<=2.8: 
     bondL += [np.array(line[0:].split(), dtype=float)[0]]

     strech += [np.array(line[0:].split(), dtype=float)[1]]
     bend += [np.array(line[0:].split(), dtype=float)[2]]
#bond = np.linspace(min(bondL0),max(bondL0))

z = np.polyfit(bondL,strech,1)
z2=np.polyfit(bondL,bend,1)
print z
print z2
plt.subplot(1,2,1)
plt.plot(bondL,strech,'yo',label='ground state')  
#plt.plot(bond,[fits(i) for i in bond],'y-',label='fitted stiffness')
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond ')
plt.legend(loc='best')
plt.subplot(1,2,2)
#plt.plot(bond,[fitb(i) for i in bond],'b-',label='fitted stiffness')
plt.plot(bondL,bend,'yo',label='ground state')
plt.ylim([-1,0.1])
plt.xlabel('bond length (A)')
plt.ylabel('stiffness of bond')
plt.legend(loc='best')
plt.tight_layout()
#plt.savefig('Cu-Pd-add.png')
plt.show()
#+END_SRC

#+RESULTS:
: [-15.759  45.875]
: [ 1.779 -5.104]

*** convergence - radius of super-cell
**** B2 structure - index 3
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [3] #
kpts = ['6','9','10']
label = ['R = 6 Ang (16 atoms)','R = 9 Ang (32 atoms)','R = 10 Ang (42 atoms)']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/er/fvib-{}-er{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for j,e in enumerate(kpts):
    plt.plot(T, Gfree(num,i,e),'-',label='B2 super-cell {}'.format(label[j]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-3-er.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:
**** FCC Cu - index 0
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [0] #
kpts = ['6','9','10']
label = ['R = 6 Ang (16 atoms)','R = 9 Ang (32 atoms)','R = 10 Ang (42 atoms)']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/er/fvib-{}-er{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for j,e in enumerate(kpts):
    plt.plot(T, Gfree(num,i,e),'-',label='fcc Cu super-cell {}'.format(label[j]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-0-er.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:
**** FCC Pd - index 1
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [1] #
kpts = ['6','9','10']
label = ['R = 6 Ang (16 atoms)','R = 9 Ang (32 atoms)','R = 10 Ang (42 atoms)']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/er/fvib-{}-er{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for j,e in enumerate(kpts):
    plt.plot(T, Gfree(num,i,e),'-',label='fcc Pd super-cell {}'.format(label[j]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-1-er.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:

**** FCC L12 index 27
#+BEGIN_SRC python

from ase import Atom, Atoms
import numpy as np
from jasp import *
from ase.visualize import view
from ase.lattice import bulk
import os
import matplotlib.pyplot as plt
################### Now plot the free energy of fcc #######
n = [27] #
kpts = ['6','9','10']
label = ['R = 6 Ang (16 atoms)','R = 9 Ang (32 atoms)','R = 10 Ang (42 atoms)']
# obtain vibrational free energy
def Gfree(n,j,e):
  filename = '../convergence-vib/er/fvib-{}-er{}'.format(n,e)
  with open(filename) as f:
    lines = f.readlines()
  G = []
  for i,line in enumerate(lines):
     G += [np.array(line[0:].split(), dtype=float)[0]]
  return G

T = np.linspace(0,1000,21)
for i,num in enumerate(n):
  for j,e in enumerate(kpts):
    plt.plot(T, Gfree(num,i,e),'-',label='fcc L12 Cu3Pd super-cell {}'.format(label[j]))
plt.legend()
plt.xlabel('T(K)')
plt.ylabel('F(eV/atom)')
str = 'vib-fitfc-27-er.png'
plt.savefig(str)
plt.show()
#+END_SRC

#+RESULTS:

** Part D. Insensitivity of Cross Validation Score and One Plausible Solution
*** draw the convex hull with large disparity in fitting and similar CVS
#+BEGIN_SRC python
from vasp import Vasp
from ase.io import read
import os

f = open('../../CuPd_fcc/gs.out','r')
lines = f.readlines()
f.close()

gs_fcc_concentration,gs_fcc_energy,gs_fcc_fitenergy,gs_fcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_fcc_concentration.append(float(c))
    gs_fcc_energy.append(float(e))
    gs_fcc_fitenergy.append(float(fe))
    gs_fcc_index.append(int(i))



f = open('../../CuPd_fcc/fit.out','r')
lines = f.readlines()
f.close()

gs_c_fcc_concentration,gs_c_fcc_energy,gs_c_fcc_fitenergy,gs_c_fcc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_c_fcc_concentration.append(float(c))
    gs_c_fcc_energy.append(float(e))
    gs_c_fcc_fitenergy.append(float(fe))
    gs_c_fcc_index.append(int(i))


f = open('../../CuPd_fcc_c/gs.out','r')
lines = f.readlines()
f.close()

gs_fccc_concentration,gs_fccc_energy,gs_fccc_fitenergy,gs_fccc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_fccc_concentration.append(float(c))
    gs_fccc_energy.append(float(e))
    gs_fccc_fitenergy.append(float(fe))
    gs_fccc_index.append(int(i))



f = open('../../CuPd_fcc_c/fit.out','r')
lines = f.readlines()
f.close()

gs_c_fccc_concentration,gs_c_fccc_energy,gs_c_fccc_fitenergy,gs_c_fccc_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_c_fccc_concentration.append(float(c))
    gs_c_fccc_energy.append(float(e))
    gs_c_fccc_fitenergy.append(float(fe))
    gs_c_fccc_index.append(int(i))


f = open('../../CuPd_fcc_encut350/gs.out','r')
lines = f.readlines()
f.close()

gs_350_concentration,gs_350_energy,gs_350_fitenergy,gs_350_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_350_concentration.append(float(c))
    gs_350_energy.append(float(e))
    gs_350_fitenergy.append(float(fe))
    gs_350_index.append(int(i))



f = open('../../CuPd_fcc_encut350/fit.out','r')
lines = f.readlines()
f.close()

gs_c_350_concentration,gs_c_350_energy,gs_c_350_fitenergy,gs_c_350_index = [],[],[],[]
for line in lines:
    fields = line.split()
    if len(fields) == 4:
        c,e,fe,i = line.split()
    elif len(fields) == 6:  #mmaps
        c, e,fe,err,nu,i = line.split()
    gs_c_350_concentration.append(float(c))
    gs_c_350_energy.append(float(e))
    gs_c_350_fitenergy.append(float(fe))
    gs_c_350_index.append(int(i))

import matplotlib.pyplot as plt
plt.subplot(131)
plt.plot(gs_c_fcc_concentration,gs_c_fcc_fitenergy,'gx',label=" Fitted Energies")
plt.plot(gs_fcc_concentration,gs_fcc_energy,'ko-',
     label='Known Ground State',markersize=4,
     markerfacecolor='blue',markeredgecolor='black')
plt.plot(gs_fcc_concentration,gs_fcc_fitenergy,'g+')
plt.plot(gs_c_fcc_concentration,gs_c_fcc_energy,'r+',label="known Structure")
plt.xlabel('$x_{%s}$' %'Pd')
plt.ylabel('Heat Of Formation (eV/atom)')
plt.text(0,0.04,'(a)',size=20)
plt.legend(loc=4,prop={'size':10})
plt.ylim([-0.15,0.05])
plt.subplot(132)
plt.plot(gs_c_fccc_concentration,gs_c_fccc_fitenergy,'gx',label=" Fitted Energies")
plt.plot(gs_fccc_concentration,gs_fccc_energy,'ko-',
     label='Known Ground State',markersize=4,
     markerfacecolor='blue',markeredgecolor='black')
plt.plot(gs_fccc_concentration,gs_fccc_fitenergy,'g+')
plt.plot(gs_c_fccc_concentration,gs_c_fccc_energy,'r+',label="known Structure")
plt.xlabel('$x_{%s}$' %'Pd')
plt.ylabel('Heat Of Formation (eV/atom)')
plt.text(0,0.04, '(b)', size=20)
plt.ylim([-0.15,0.05])
plt.legend(loc=4,prop={'size':10})
plt.subplot(133)
plt.plot(gs_c_350_concentration,gs_c_350_fitenergy,'gx',label=" Fitted Energies")
plt.plot(gs_350_concentration,gs_350_energy,'ko-',
     label='Known Ground State',markersize=4,
     markerfacecolor='blue',markeredgecolor='black')
plt.plot(gs_350_concentration,gs_350_fitenergy,'g+')
plt.plot(gs_c_350_concentration,gs_c_350_energy,'r+',label="known Structure")
plt.xlabel('$x_{%s}$' %'Pd')
plt.ylabel('Heat Of Formation (eV/atom)')
plt.text(0,0.04, '(c)', size=20)
plt.ylim([-0.15,0.05])

plt.tight_layout()
plt.legend(loc=4,prop={'size':10})
str = './LCVS-convexhull.png'
plt.savefig(str)
plt.show()






#+END_SRC

#+RESULTS:

bibliography:references.bib
bibliographystyle:unsrt


